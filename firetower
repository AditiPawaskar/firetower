#!/bin/bash

tmp_file_name=".firetower"

trap gentle_close SIGTERM SIGINT
trap restart_child_command SIGHUP

function gentle_close() {
  # clear lockfile with PIDs from directory
  rm -f $tmp_file_name
  # clear trap and send sigterm to process group
  trap - SIGTERM && kill -- -$$
}

function restart_child_command() {
  restart_hup_sent_since_this_iteration_started=true
}

function rewrite_pid_tmpfile() {
  local parent_pid="$1"
  local child_pid="$2"
  echo $parent_pid $child_pid > $tmp_file_name
}

function sleep_forever() {
  exec sleep 1000000000
}

function announce_command_start() {
  test -n "$clear_scrollback" && {
    echo -en '\0033\0143'                # clear most terminals
    echo -en '\033]50;ClearScrollback\a' # clear iTerm
  }
  pwd
  echo "firetower started \`$1\` at $(date $T)"
  echo
}

function run_child_command() {
  clear_scrollback=$(should_clear_scrollback "$@")

  local command="$(get_command "$@")"
  cd "$(get_directory "$@")"
  abort_if_existing_tmp_file "$@"
  while :; do
    restart_hup_sent_since_this_iteration_started=""
    { $command &
      set_child_pid $!
      announce_command_start "$command"
    } | sed
    test -n "$restart_hup_sent_since_this_iteration_started" && continue
    {
      sleep_forever &
      set_child_pid $!
    } | sed
    echo
  done
}

function abort_if_existing_tmp_file() {
  test -f $tmp_file_name && {
    echo "'.firetower' file already exists in $(pwd)"
    echo "is there already a process using this directory?"
    echo "aborting.."
    exit 1
  }
}

function restart_command() {
  cd "$(get_directory "$@")"
  test -f $tmp_file_name || {
    return 1
  }

  # send HUP to existing firetower so it will continue
  # a HUP won't register until the parent process isn't blocked
  # we send it first so it comes into effect immediately the blocking child dies
  local firetower_id="$(cat $tmp_file_name | cut -d ' ' -f 1)"
  kill -HUP $firetower_id

  # double tap - some programs request a "ctr-c again to exit"
  local child_id="$(cat $tmp_file_name | cut -d ' ' -f 2)"
  kill -15 $child_id
  kill -2 $child_id
}

function stop_firetower() {
  cd "$(get_directory "$@")"
  test -f $tmp_file_name || {
    return 1
  }
  kill $(cat $tmp_file_name)
  rm -f "$tmp_file_name"
}

function usage() {
  echo "usage: firetower [-h help] | [-c command | -r restart_command | -s stop_firetower ] [--directory=directory]"
  exit 0
}

function help() {
  usage
}

function get_flag() {
  if [[ $1 == '-h' ]] ; then
    echo 'help'
  elif [[ $1 == '-c' ]] ; then
    echo 'run_child_command'
  elif [[ $1 == '-r' ]] ; then
    echo 'restart_command'
  elif [[ $1 == '-s' ]] ; then
    echo 'stop_firetower'
  elif [[ ${1:0:1} == '-' ]] || [ "$#" == "0" ] ; then
    # if any other flags are passed, display usage
    echo 'usage'
  else
    echo 'run_child_command'
  fi
}

function should_clear_scrollback() {
  for var in "$@" ; do
    if [[ $var == --clear-scrollback ]] ; then
      echo true && return
    fi
  done
}

function get_directory() {
  for var in "$@"
  do
    if [[ $var == --directory=* ]] ; then
      echo "$var" | cut -d '=' -f 2
      return
    fi
  done
  echo "./"
}

function get_command() {
  local flag_passed=""
  local first_arg=$1
  if [[ $first_arg == "-c" ]] ; then
    echo "$2"
  else
    echo "$1"
  fi
}

function debug() {
  echo 'DEBUG'
  echo fla - $(get_flag "$@")
  echo dir - $(get_directory "$@")
  echo com - $(get_command "$@")
  exit 0
}
# debug "$@"

function main() {
  $(get_flag "$@") "$@"
}
main "$@"
